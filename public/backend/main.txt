# Documentation of the Backend part
> Deliverable D1
## General group information
| Member n. | Role | First name | Last Name | Matricola | Email address |
|-----------|---------------|------------|-----------|-----------|-----------------|
| 1 | administrator | Giovanni | Valcarenghi | 946999 | giovanni.valcarenghi@mail.polimi.it |
| 2 | member | Edoardo | Realini | 944737 | edoardo.realini@mail.polimi.it |
| 3 | member | Riccardo | Sommaruga | 944772 | riccardo.sommaruga@mail.polimi.it |

## Links to other deliverables
- Deliverable D0: the web application is accessible at [this address](https://hyp-ave.herokuapp.com/).
- Deliverable D2: the YAML or JSON file containing the specification of the app API can be found at [this address](https://hyp-ave.herokuapp.com/backend/spec.yaml).
- Deliverable D3: the SwaggerUI page of the same API is available at [this address](https://hyp-ave.herokuapp.com/backend/swaggerui).
- Deliverable D4: the source code of D0 is available as a zip file at [this address](https://hyp-ave.herokuapp.com/backend/app.zip).
- Deliverable D5: the address of the online source control repository is available [this address](https://github.com/GioValca/HYPWebsite.git) and [this address](https://github.com/GioValca/Hypermedia-Application.git). The first address is the final repository the one we have used only for the deployment of the web application, instead the second one is our repository for the whole project of Hypermedia Applications.
We hereby declare that this is a private repository and, upon request, we will give access to the instructors.

## Specification
### Web Architecture
"Describe here, with a diagram, the components of your web application and how they interact. Highlight which parts belong to the application layer, data layer or presentation layer. How did you ensure that HTML is not rendered server side?"
### API
#### REST compliance
"Describe here to what extent did you follow REST principles and what are the reasons for which you might have decided to diverge. Note, you must not describe the whole API here, just the design decisions."
Our API is REST compliance since we have used the REST principles to create an API that allows client and server to grow independently. It adheres to the most important REST architectural constraints:
- The resources are uniquely identifiable through a single URL, and only by using the underlying methods of the network protocol is possible to manipulate a resource.
- It is Client-Server based.
- Any state management that is required take place on the client, not on the server.
- It allows for an architecture composed of multiple layers of servers.
#### OpenAPI Resource models
"Describe here synthetically, which models you have introduced for resources."
In our website for the voluntary association we have introduced the following main entities. All these entities contains the main specific data for each category, the only common thing is the Id, each entity has its own unique Id so that is possible to uniquely identify each of them.
- People: who are the people that works in the association.
- Services: that are the services that the association offers.
- Event: which are the evnts of the association.

All these different resouces has their own path so that is possible to retrieve each of them separately. For more info please refer to Deliverable 2 and Deliverable 3. 

### Data model
"Describe with an ER diagram the model used in the data layer of your web application. How these map to the OpenAPI data model?"

The represented tables are the one that has been already presented in the resource model paragraph.
However we had transform two relationship into tables, those are:
- People involved in services: this table shows the link between the people that work in the association and the services that people deal with.
- Pictures of the services: this table is useful to have a link between all the pictures of the services and the service they belong to.

## Implementation
### Tools used
There are many tools we have used for the development of our backend.
- Swagger Editor: for the creation of the API.
- Knex.js: for the query creation.
- Heroku: for the hosting of the WebApp.
- Amazon Web Services: for the hosting of the Database (automatically generated through the Heroku plug-in for the postgress database).
- Postgress: to create localhost Databases.
- Postico: to manage the localhost and the Amazon Database (MacOS).
- Datagrip: to manage the localhost and the Amazon Database (Windows).
### Discussion
"How did you make sure your web application adheres to the provided OpenAPI specification? Which method did you use to test all APIs endpoints against the expected response?"

Since the API was not so large we have had the possibility to manually check for each endpoints and assure that everything work properly. This was made by making directed requests to the API through the browser.

"Why do you think your web application adheres to common practices to partition a REST-based web application (static assets vs. application data)?"

As it is the common practices for a REST-based web application, we have partition our web application into two:
- the static assets, that contains all the static pages of the website and is part of the presentation layer.
- the application data, that contains all the logic and API definitions of the web application, that is part of the Backend structure.

"Describe synthetically why and how did you manage session state, what are the state change triggering actions (e.g., POST to login etc..)."

For the session state management we don't have looked at it because it was not required for the implementation of this project.

"Which technology did you use (relational or a no-SQL database) for managing the data model?"

We have used a relational database for managing the data model because the nature of the entities and relationships occurring among the entities suggested this type of structure could perform better.

## Other information
### Task assignment
Describe here how development tasks have been subdivided among members of the group, e.g.:
> - Giovanni worked on front end (30%) and OpenAPI Spec (70% of the time)
> - Edoardo worked on front end (70%) and OpenAPI Spec (30% of the time)
> - Riccardo worked on front end (70%) and OpenAPI Spec (30% of the time)

Since we have subdivided the workload between front end and backend part at every weekly meeting we explained each other the recently implemented features and helped each other. In this way, everybody could constantly understand what was going on in every part of the project.

### Analysis of existing API
"Describe here the research of (full or part of) existing APIs that are similar in objectives and scope to the one implemented, that have possibly guided implementation choices (these should not be necessarily OpenAPI implementations). Toy APIs (such as the Swagger's Pet Store) or the example shown during lectures are not a valid response."

One API which we have found really intresting was the one used by the website of "visit tuscany" ([this address](https://www.visittuscany.com/en/plan-your-trip/modalita-di-utilizzo-delle-api/)).
> We took partial inspiration from API [ link ](https://www.visittuscany.com/en/plan-your-trip/modalita-di-utilizzo-delle-api/) for the part of the API that manages "Events" because they have used a grouping on the bases of the typology of the events, and that was our identical case for the "Events" entity, where we have also divided it on the bases of the type. That was performed by adding the TypeId in the path of the API request.

> We also have took inspiration from API [ link ](https://www.visittuscany.com/en/plan-your-trip/modalita-di-utilizzo-delle-api/) for the management of the pagination, they have called "rows" and "start" what we have called "offset" and "limit" that allows to limit the number of rows and offset of the returned data by the Database.

### Learning outcome
"What was the most important thing all the members have learned while developing this part of the project, what questions remained unanswered, how you will use what you've learned in your everyday life?
Examples:"
- Giovanni learned how to manage Databases and how to retrieve data with the use of Knex.js, moreover has understood the mechanism used to deploy a web application over the internet and how to access the API through the browser. Unfortunately he doesn't use too much the type of POST requests and coockies storage, but is certainly something that is going to deepen in the future.
- Edoardo learned how to create functional html and JS. Mainly he understood the relationship between these technologies and how to exploit them at best for our purposes. He also understood the concept of promises in JS which is very important to create good dynamic content in html pages.  Also the use of session storage and cookies is generally more clear. However Edoardo would have liked to see more about the setup of a database and in general of the API system of the backend part. Nevertheless he is much more aquantied with the on hand use of a database through different clients such as JetBrain's DataGrip.
- Riccardo learned how to manage dynamic content on HTML pages through jQuery and how to use API through AJAX in order to retrieve specific data from the Database. Particularly, he focused on understanding how the style of a page is set through CSS. He has also understood the mechanism of API and how it is related to a Database. About this point, he is now able to use Datagrip client in order to make operations on a database.
